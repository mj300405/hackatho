# Generated by Django 5.1.3 on 2024-11-30 17:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roulette_cooldown_hours', models.PositiveIntegerField(default=24)),
                ('roulette_early_price', models.PositiveIntegerField(default=50)),
                ('new_hobby_activation_price', models.PositiveIntegerField(default=100)),
                ('hobby_deletion_price', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField()),
                ('location', models.CharField(max_length=255)),
                ('personality_type', models.CharField(choices=[('INTJ', 'INTJ - Architect'), ('INTP', 'INTP - Logician'), ('ENTJ', 'ENTJ - Commander'), ('ENTP', 'ENTP - Debater'), ('INFJ', 'INFJ - Advocate'), ('INFP', 'INFP - Mediator'), ('ENFJ', 'ENFJ - Protagonist'), ('ENFP', 'ENFP - Campaigner'), ('ISTJ', 'ISTJ - Logistician'), ('ISFJ', 'ISFJ - Defender'), ('ESTJ', 'ESTJ - Executive'), ('ESFJ', 'ESFJ - Consul'), ('ISTP', 'ISTP - Virtuoso'), ('ISFP', 'ISFP - Adventurer'), ('ESTP', 'ESTP - Entrepreneur'), ('ESFP', 'ESFP - Entertainer')], max_length=4)),
                ('coins', models.PositiveIntegerField(default=0)),
                ('exp', models.PositiveIntegerField(default=0)),
                ('personality_details', models.JSONField(blank=True, default=dict, null=True)),
                ('available_time', models.PositiveIntegerField(blank=True, default=60, help_text='Available minutes per day', null=True)),
                ('budget_preference', models.CharField(blank=True, choices=[('LOW', '$0-50'), ('MEDIUM', '$50-200'), ('HIGH', '$200+')], default='MEDIUM', max_length=20, null=True)),
                ('profile_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hobby',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('difficulty_level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced')], default='BEGINNER', max_length=20)),
                ('time_commitment', models.PositiveIntegerField(help_text='Required minutes per day')),
                ('price_range', models.CharField(max_length=50)),
                ('required_equipment', models.JSONField(blank=True, default=list)),
                ('minimum_age', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
                ('related_hobbies', models.ManyToManyField(blank=True, to='core.hobby')),
                ('tags', models.ManyToManyField(related_name='hobbies', to='core.tag')),
            ],
            options={
                'verbose_name_plural': 'hobbies',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('reward', models.PositiveIntegerField()),
                ('progress', models.PositiveIntegerField(default=0)),
                ('target', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('successful', models.BooleanField(default=False)),
                ('expiration_date', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL)),
                ('hobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='core.hobby')),
            ],
        ),
        migrations.CreateModel(
            name='HobbyTasting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('duration', models.PositiveIntegerField(default=15, help_text='Duration in minutes')),
                ('equipment_needed', models.JSONField(blank=True, default=list)),
                ('instructions', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tastings', to='core.hobby')),
            ],
        ),
        migrations.CreateModel(
            name='RouletteHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_at', models.DateTimeField(auto_now_add=True)),
                ('was_accepted', models.BooleanField(default=False)),
                ('coins_spent', models.PositiveIntegerField(default=0)),
                ('hobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.hobby')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roulette_history', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserHobby',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('favorite', 'Favorite'), ('completed', 'Completed')], max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('resources_links', models.JSONField(blank=True, default=list)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('hobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_hobbies', to='core.hobby')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_hobbies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
